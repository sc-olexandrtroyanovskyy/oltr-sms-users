<?xml version="1.0" encoding="utf-8" ?>

<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/" xmlns:role="http://www.sitecore.net/xmlconfig/role/">
    <sitecore>
        <api>
            <GraphQL>
                <!-- the defaults section contains config templates that can be reused elsewhere using 'ref' -->
                <defaults>
                    <content>
                        <schemaProviders>
                            <!-- 
                                Default content schema provider for Helix content - an API for consumption by a website 
                                Usage: on your endpoint, change your content schema provider to '<content ref="/sitecore/GraphQL/defaults/content/helixContent" param1="master" />'
                                (where param1 is the database you want to hook to)
                            -->
                            <helixContent type="Sitecore.Services.GraphQL.Content.ContentSchemaProvider, Sitecore.Services.GraphQL.Content">
                                <!-- 
                                    The template predicate defines which templates will have GraphQL types generated for them. This is NOT a security measure - all fields
                                    that the API key user/authenticated user can access can be queried by name - but can be used to limit the scope of your GraphQL schema.
                                -->
                                <templates type="Sitecore.Services.GraphQL.Content.TemplateGeneration.Filters.StandardTemplatePredicate, Sitecore.Services.GraphQL.Content">
                                    <database>$(1)</database>
                                    <paths hint="list:AddIncludedPath">
                                        <foundation>/sitecore/templates/Foundation</foundation>
                                        <feature>/sitecore/templates/Feature</feature>
                                        <project>/sitecore/templates/Project</project>
                                    </paths>
                                    <fieldFilter type="Sitecore.Services.GraphQL.Content.TemplateGeneration.Filters.StandardFieldFilter, Sitecore.Services.GraphQL.Content">
                                        <exclusions hint="raw:AddFilter">
                                            <!-- 
                                                Remove system fields from the GraphQL types in the strongly typed API (e.g. __Layout)
                                                Wildcards are allowed.
                                            -->
                                            <exclude name="__*" />
                                            <!--
                                                You can also exclude fields from the schema specifically by field ID
                                            <exclude fieldId="{8FB875EB-3AD3-44FF-87E1-998370CC3199}" />-->
                                        </exclusions>
                                    </fieldFilter>
                                </templates>

                                <!-- 
                                    Define the GraphQL root object for the schema (queries, mutations, and subscriptions)
                                    You may use `resolve=true` to activate dependency injection on root fields.
                                    All root fields must inherit from FieldType (EventStreamFieldType for subscriptions)
                                    Fields may optionally implement IContentSchemaRootFieldType to get a Database instance (automatic property is expected)
                                -->
                                <queries hint="raw:AddQuery">
                                    <query name="item" type="Sitecore.Services.GraphQL.Content.Queries.ItemQuery, Sitecore.Services.GraphQL.Content" />
                                    <query name="search" type="Sitecore.Services.GraphQL.Content.Queries.SearchQuery, Sitecore.Services.GraphQL.Content" />
                                </queries>
                                
                                <fieldTypeMapping ref="/sitecore/api/GraphQL/defaults/content/fieldTypeMappings/standardTypeMapping" />
                            </helixContent>

                            <!-- 
                                Default content schema provider for System content - an API for consumption by the Sitecore backend or other administrative tools
                                Usage: on your endpoint, change your content schema provider to '<content ref="/sitecore/GraphQL/defaults/content/systemContent" param1="master" />'
                                (where param1 is the database you want to hook to)
                            -->
                            <systemContent type="Sitecore.Services.GraphQL.Content.ContentSchemaProvider, Sitecore.Services.GraphQL.Content">
                                <!-- 
                                    The template predicate defines which templates will have GraphQL types generated for them. This is NOT a security measure - all fields
                                    that the API key user/authenticated user can access can be queried by name - but can be used to limit the scope of your GraphQL schema.
                                -->
                                <templates type="Sitecore.Services.GraphQL.Content.TemplateGeneration.Filters.StandardTemplatePredicate, Sitecore.Services.GraphQL.Content">
                                    <database>$(1)</database>
                                    <paths hint="list:AddIncludedPath">
                                        <templates>/sitecore/templates</templates>
                                    </paths>
                                    <fieldFilter type="Sitecore.Services.GraphQL.Content.TemplateGeneration.Filters.StandardFieldFilter, Sitecore.Services.GraphQL.Content" />
                                </templates>

                                <!-- 
                                    Define the GraphQL root object for the schema (queries, mutations, and subscriptions)
                                    You may use `resolve=true` to activate dependency injection on root fields.
                                    All root fields must inherit from FieldType (EventStreamFieldType for subscriptions)
                                    Fields may optionally implement IContentSchemaRootFieldType to get a Database instance (automatic property is expected)
                                -->
                                <queries hint="raw:AddQuery">
                                    <query name="item" type="Sitecore.Services.GraphQL.Content.Queries.ItemQuery, Sitecore.Services.GraphQL.Content" />
                                    <query name="sites" type="Sitecore.Services.GraphQL.Content.Queries.SiteQuery, Sitecore.Services.GraphQL.Content" />
                                    <query name="templates" type="Sitecore.Services.GraphQL.Content.Queries.TemplatesQuery, Sitecore.Services.GraphQL.Content" />
                                    <query name="search" type="Sitecore.Services.GraphQL.Content.Queries.SearchQuery, Sitecore.Services.GraphQL.Content" />
                                </queries>
                                <mutations hint="raw:AddMutation">
                                    <mutation name="createItem" type="Sitecore.Services.GraphQL.Content.Mutations.CreateItemMutation, Sitecore.Services.GraphQL.Content" resolve="true"/>
                                    <mutation name="updateItem" type="Sitecore.Services.GraphQL.Content.Mutations.UpdateItemMutation, Sitecore.Services.GraphQL.Content" resolve="true"/>
                                    <mutation name="deleteItem" type="Sitecore.Services.GraphQL.Content.Mutations.DeleteItemMutation, Sitecore.Services.GraphQL.Content" />
                                </mutations>
                                <subscriptions hint="raw:AddSubscription">
                                    <subscription name="itemAdded" type="Sitecore.Services.GraphQL.Content.Subscriptions.ItemAddedSubscription, Sitecore.Services.GraphQL.Content" resolve="true" />
                                    <subscription name="itemSaved" type="Sitecore.Services.GraphQL.Content.Subscriptions.ItemSavedSubscription, Sitecore.Services.GraphQL.Content" resolve="true" />
                                    <subscription name="itemDeleted" type="Sitecore.Services.GraphQL.Content.Subscriptions.ItemDeletedSubscription, Sitecore.Services.GraphQL.Content" resolve="true" />
                                    <subscription name="publishingStatus" type="Sitecore.Services.GraphQL.Content.Subscriptions.PublishingStatusSubscription, Sitecore.Services.GraphQL.Content" resolve="true" />
                                </subscriptions>
                                <fieldTypeMapping ref="/sitecore/api/GraphQL/defaults/content/fieldTypeMappings/standardTypeMapping" />
                            </systemContent>
                        </schemaProviders>

                        <fieldTypeMappings>
                            <!--
                                Maps Sitecore field type names to GraphQL object types
                                NOTE: It's ok to add new custom field types in here, but if you want to modify the behavior of fields in a breaking
                                way, you should make a copy of the 'standardTypeMapping' element to modify and change your endpoint to refer to it instead
                                to avoid unwanted imperial entanglements with system API endpoints (e.g. breaking the content editor)
                            -->
                            <standardTypeMapping type="Sitecore.Services.GraphQL.Content.TemplateGeneration.FieldTypeToGraphQLTypeMapper, Sitecore.Services.GraphQL.Content">
                                <typeMapping hint="raw:AddTypeMapping">
                                    <!-- Simple Types -->
                                    <map field="Checkbox" type="Sitecore.Services.GraphQL.Content.TemplateGeneration.FieldMapping.BooleanFieldTypeFactory, Sitecore.Services.GraphQL.Content" />
                                    <map field="Date" type="Sitecore.Services.GraphQL.Content.TemplateGeneration.FieldMapping.DateTimeFieldTypeFactory, Sitecore.Services.GraphQL.Content" />
                                    <map field="Datetime" type="Sitecore.Services.GraphQL.Content.TemplateGeneration.FieldMapping.DateTimeFieldTypeFactory, Sitecore.Services.GraphQL.Content" />
                                    <map field="File" type="Sitecore.Services.GraphQL.Content.TemplateGeneration.FieldMapping.FileFieldTypeFactory, Sitecore.Services.GraphQL.Content" />
                                    <map field="Image" type="Sitecore.Services.GraphQL.Content.TemplateGeneration.FieldMapping.ImageFieldTypeFactory, Sitecore.Services.GraphQL.Content" />
                                    <map field="Integer" type="Sitecore.Services.GraphQL.Content.TemplateGeneration.FieldMapping.IntegerFieldTypeFactory, Sitecore.Services.GraphQL.Content" />
                                    <!--<map field="Multi-Line Text" type="handled-by-default" />-->
                                    <map field="Number" type="Sitecore.Services.GraphQL.Content.TemplateGeneration.FieldMapping.NumberFieldTypeFactory, Sitecore.Services.GraphQL.Content" />
                                    <!--<map field="Password" type="handled-by-default" />-->
                                    <!--<map field="Rich Text" type="handled-by-default" />-->
                                    <!--<map field="Single-Line Text" type="handled-by-default" />-->

                                    <!-- List Types -->
                                    <map field="Checklist" type="Sitecore.Services.GraphQL.Content.TemplateGeneration.FieldMapping.MultilistFieldTypeFactory, Sitecore.Services.GraphQL.Content" />
                                    <!--<map field="Droplist" type="handled-by-default" />-->
                                    <map field="Grouped Droplink" type="Sitecore.Services.GraphQL.Content.TemplateGeneration.FieldMapping.MultilistFieldTypeFactory, Sitecore.Services.GraphQL.Content" />
                                    <!--<map field="Grouped Droplist" type="handled-by-default" />-->
                                    <map field="Multilist" type="Sitecore.Services.GraphQL.Content.TemplateGeneration.FieldMapping.MultilistFieldTypeFactory, Sitecore.Services.GraphQL.Content" />
                                    <map field="Multilist with Search" type="Sitecore.Services.GraphQL.Content.TemplateGeneration.FieldMapping.MultilistFieldTypeFactory, Sitecore.Services.GraphQL.Content" />
                                    <map field="Name Value List" type="Sitecore.Services.GraphQL.Content.TemplateGeneration.FieldMapping.NameValueListFieldTypeFactory, Sitecore.Services.GraphQL.Content" />
                                    <map field="Name Lookup Value List" type="Sitecore.Services.GraphQL.Content.TemplateGeneration.FieldMapping.NameValueListFieldTypeFactory, Sitecore.Services.GraphQL.Content" />
                                    <map field="Treelist" type="Sitecore.Services.GraphQL.Content.TemplateGeneration.FieldMapping.MultilistFieldTypeFactory, Sitecore.Services.GraphQL.Content" />
                                    <map field="TreelistEx" type="Sitecore.Services.GraphQL.Content.TemplateGeneration.FieldMapping.MultilistFieldTypeFactory, Sitecore.Services.GraphQL.Content" />

                                    <!-- Link Types -->
                                    <map field="Droplink" type="Sitecore.Services.GraphQL.Content.TemplateGeneration.FieldMapping.LookupFieldTypeFactory, Sitecore.Services.GraphQL.Content" />
                                    <map field="Droptree" type="Sitecore.Services.GraphQL.Content.TemplateGeneration.FieldMapping.ReferenceFieldTypeFactory, Sitecore.Services.GraphQL.Content" />
                                    <map field="General Link" type="Sitecore.Services.GraphQL.Content.TemplateGeneration.FieldMapping.LinkFieldTypeFactory, Sitecore.Services.GraphQL.Content" />
                                    <map field="General Link with Search" type="Sitecore.Services.GraphQL.Content.TemplateGeneration.FieldMapping.LinkFieldTypeFactory, Sitecore.Services.GraphQL.Content" />

                                    <!-- System Types-->
                                    <!--<map field="Internal Link" type="handled-by-default" />-->
                                    <!--<map field="Rules" type="handled-by-default" />-->
                                    
                                    <!-- Deprecated Types -->
                                    <!--<map field="text" type="handled-by-default" />-->
                                    <!--<map field="memo" type="handled-by-default" />-->
                                    <map field="link" type="Sitecore.Services.GraphQL.Content.TemplateGeneration.FieldMapping.LinkFieldTypeFactory, Sitecore.Services.GraphQL.Content" />
                                    <map field="lookup" type="Sitecore.Services.GraphQL.Content.TemplateGeneration.FieldMapping.LookupFieldTypeFactory, Sitecore.Services.GraphQL.Content" />
                                    <map field="reference" type="Sitecore.Services.GraphQL.Content.TemplateGeneration.FieldMapping.ReferenceFieldTypeFactory, Sitecore.Services.GraphQL.Content" />
                                    <map field="tree" type="Sitecore.Services.GraphQL.Content.TemplateGeneration.FieldMapping.ReferenceFieldTypeFactory, Sitecore.Services.GraphQL.Content" />
                                    <map field="tree list" type="Sitecore.Services.GraphQL.Content.TemplateGeneration.FieldMapping.MultilistFieldTypeFactory, Sitecore.Services.GraphQL.Content" />
                                    <!--<map field="html" type="handled-by-default" />-->

                                    <!-- Layout types -->
                                    <map field="Layout" type="Sitecore.Services.GraphQL.Content.TemplateGeneration.FieldMapping.LayoutFieldTypeFactory, Sitecore.Services.GraphQL.Content" />

                                    <!-- the default type is used when no explicit mapping exists for another type -->
                                    <map field="default" type="Sitecore.Services.GraphQL.Content.TemplateGeneration.FieldMapping.StringValueFieldTypeFactory, Sitecore.Services.GraphQL.Content" />
                                </typeMapping>
                            </standardTypeMapping>
                            <inputTypeMapping type="Sitecore.Services.GraphQL.Content.Mutations.FieldTypeToJsonTypeMapper, Sitecore.Services.GraphQL.Content">
                                <typeMapping hint="raw:AddTypeMapping">
                                    <map field="checkbox" type="Sitecore.Services.GraphQL.Content.Mutations.JsonFields.JsonCheckboxField, Sitecore.Services.GraphQL.Content" />
                                    <map field="date" type="Sitecore.Services.GraphQL.Content.Mutations.JsonFields.JsonDateTimeField, Sitecore.Services.GraphQL.Content" />
                                    <map field="datetime" type="Sitecore.Services.GraphQL.Content.Mutations.JsonFields.JsonDateTimeField, Sitecore.Services.GraphQL.Content" />
                                    <map field="integer" type="Sitecore.Services.GraphQL.Content.Mutations.JsonFields.JsonIntegerField, Sitecore.Services.GraphQL.Content" />
                                    <map field="multi-line text" type="Sitecore.Services.GraphQL.Content.Mutations.JsonFields.JsonStringField, Sitecore.Services.GraphQL.Content" />
                                    <map field="rich text" type="Sitecore.Services.GraphQL.Content.Mutations.JsonFields.JsonStringField, Sitecore.Services.GraphQL.Content" />
                                    <map field="single-line text" type="Sitecore.Services.GraphQL.Content.Mutations.JsonFields.JsonStringField, Sitecore.Services.GraphQL.Content" />
                                    <map field="number" type="Sitecore.Services.GraphQL.Content.Mutations.JsonFields.JsonNumberField, Sitecore.Services.GraphQL.Content" />
                                    <map field="checklist" type="Sitecore.Services.GraphQL.Content.Mutations.JsonFields.JsonChecklistField, Sitecore.Services.GraphQL.Content" />
                                    <map field="general link" type="Sitecore.Services.GraphQL.Content.Mutations.JsonFields.JsonGeneralLinkField, Sitecore.Services.GraphQL.Content" />
                                    <map field="droptree" type="Sitecore.Services.GraphQL.Content.Mutations.JsonFields.JsonReferenceField, Sitecore.Services.GraphQL.Content" />
                                </typeMapping>
                            </inputTypeMapping>
                        </fieldTypeMappings>
                    </content>
                </defaults>
            </GraphQL>
        </api>
        
        <events>
            <!-- Resets the GraphQL schema when templates are altered in Sitecore, so that the schema is always up to date -->
            <event name="item:saved">
                <handler type="Sitecore.Services.GraphQL.Content.EventHandlers.TemplateUpdateHandler, Sitecore.Services.GraphQL.Content" method="OnItemSaved" resolve="true" />
            </event>
            <event name="item:copied">
                <handler type="Sitecore.Services.GraphQL.Content.EventHandlers.TemplateUpdateHandler, Sitecore.Services.GraphQL.Content" method="OnItemCopied" resolve="true" />
            </event>
            <event name="item:renamed">
                <handler type="Sitecore.Services.GraphQL.Content.EventHandlers.TemplateUpdateHandler, Sitecore.Services.GraphQL.Content" method="OnItemRenamed" resolve="true" />
            </event>
            <event name="item:deleted">
                <handler type="Sitecore.Services.GraphQL.Content.EventHandlers.TemplateUpdateHandler, Sitecore.Services.GraphQL.Content" method="OnItemDeleted" resolve="true" />
            </event>
            <event name="publish:end">
                <handler type="Sitecore.Services.GraphQL.Content.EventHandlers.TemplateUpdateHandler, Sitecore.Services.GraphQL.Content" method="OnPublishEnd" resolve="true" />
            </event>
            <event name="publish:end:remote">
                <handler type="Sitecore.Services.GraphQL.Content.EventHandlers.TemplateUpdateHandler, Sitecore.Services.GraphQL.Content" method="OnPublishEndRemote" resolve="true" />
            </event>            
        </events>

        <services>
            <configurator type="Sitecore.Services.GraphQL.Content.DependencyConfigurator, Sitecore.Services.GraphQL.Content" />
        </services>
    </sitecore>
</configuration>
