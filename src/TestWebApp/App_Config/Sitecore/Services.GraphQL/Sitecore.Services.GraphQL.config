<?xml version="1.0" encoding="utf-8" ?>

<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/" xmlns:role="http://www.sitecore.net/xmlconfig/role/">
    <sitecore>
        <api>
            <GraphQL>
                <!--
                    The GraphQL API system is defined here.
                    The core element is defining endpoints, which serve a GraphQL schema.
                    See examples of endpoints in Sitecore.Services.GraphQL.Content.Master.config, et al.
                    IMPORTANT: each endpoint definition must have a _unique_ XML element name compared to other endpoints.
                
                    A GraphQL endpoint has several URLs you can use:
                    - the base URL that is configured. This is the GraphQL URL to point API requests at.
                    - $baseURL/ui - a graphical GraphQL client you can use to construct queries at the endpoint
                    - $baseURL/schema - prints out the entire GraphQL schema for review or consumption by tools that understand schema language
                    - $baseURL/stats - basic statistics about the endpoint, its type system, and its performance
                -->
                <defaults>
                    <security>
                        <!-- 
                            The security preset for Sitecore system services (should not be altered).
                            This preset allows authenticated Sitecore users via cookies to access the API.
                        -->
                        <systemService type="Sitecore.Services.GraphQL.Hosting.Security.GraphQLSecurity, Sitecore.Services.GraphQL">
                            <!--
                                REQUIRE AUTHENTICATION
                                If true, you must pass Sitecore authentication cookies to be a valid user.
                                If false, anonymous users are allowed. They will impersonate either the SSC default user, or their API key's user
                                    if an API key is passed.
                                    
                                Note that requests to the Sitecore API are done in the context of the authenticated user, so APIs that
                                support authorization (e.g. content) will return results from that user's context.
                            -->
                            <requireAuthentication>true</requireAuthentication>

                            <!--
                                REQUIRE API KEY
                                If true, requests must be passed with a valid SSC API Key (either in query string or HTTP header, both 'sc_apikey').
                                The API key is defined in core:/sitecore/system/Settings/Services/API Keys. The key is the ID of the key item.
                                An API key can be used to enable CORS, limit service access, or alter the effective Sitecore user permissions of a key user.
                                NOTE: an API key is not authentication, and is not a secure secret. If you need authentication, use authentication as a Sitecore user instead.
                            -->
                            <requireApiKey>false</requireApiKey>

                            <!-- 
                                AUTHORIZATION FILTER 
                                Checks a consumer's rights to access the service once authenticated.
                                Comment out the <authorization> node entirely to disable authorization.
                                If you need to implement custom authorization, inherit from IAuthorizationFilter.
                            -->
                            <!--<authorization type="Sitecore.Services.GraphQL.Hosting.Security.Authorization.RoleAuthorizationFilter, Sitecore.Services.GraphQL">
                                <roles hint="list:AddRole">
                                    <role>sitecore\APIAwesome</role>
                                </roles>
                                <allowAdministrators>true</allowAdministrators>
                            </authorization>-->

                            <!--
                                CORS RESOLVER
                                CORS origins can be stored either in SSC configuration either in Item '/sitecore/system/Settings/Services/GraphQL/CORS origins'
                                For each cases uses appropiate resolver. So, it could be:
                                - Sitecore.Services.GraphQL.Hosting.Mvc.SscSecurity.CorsResolverFromConfig - it uses for OnPrem
                                - Sitecore.Services.GraphQL.Hosting.Mvc.SscSecurity.CorsResolverFromItem - it uses for SaaS
                            -->
                            <corsOriginsResolver type="Sitecore.Services.GraphQL.Hosting.Mvc.SscSecurity.CorsResolverFromConfig, Sitecore.Services.GraphQL.NetFxHost">
                                <param desc="sscSettings" type="Sitecore.Services.Core.Configuration.ConfigurationSettings, Sitecore.Services.Core" resolve="true"/>
                            </corsOriginsResolver>

                        </systemService>

                        <!--
                            The security preset for a public GraphQL service.
                            This preset allows anonymous API access using API keys,
                            which can be configured to allow remote domains to call it from JavaScript with CORS.
                        -->
                        <publicService type="Sitecore.Services.GraphQL.Hosting.Security.GraphQLSecurity, Sitecore.Services.GraphQL">
                            <!--
                                REQUIRE AUTHENTICATION
                                If true, you must pass Sitecore authentication cookies to be a valid user.
                                If false, anonymous users are allowed. They will impersonate either the SSC default user, or their API key's user
                                    if an API key is passed.
                            -->
                            <requireAuthentication>false</requireAuthentication>

                            <!--
                                REQUIRE API KEY
                                If true, requests must be passed with a valid SSC API Key (either in query string or HTTP header).
                                The API key is defined in core:/sitecore/system/Settings/Services/API Keys. The key is the ID of the key item.
                                An API key can be used to enable CORS, limit service access, or alter the effective Sitecore user permissions of a key user.
                                NOTE: an API key is not authentication, and is not a secure secret. If you need authentication, use authentication as a Sitecore user instead.
                            -->
                            <requireApiKey>true</requireApiKey>

                            <!--
                                COMPLEXITY CONFIGURATION
                                It is possible to conduct denial of service attacks by constructing extremely expensive to run GraphQL queries.
                                The complexity configuration defeats that by limiting how complex of a query will be run.
                                
                                maxDepth: how deep the nesting can go in a query. This is good basic protection. 
                                NOTE: maxDepth values less than 15 will prevent /ui from running
                                
                                fieldImpact: the average impact of adding a list field to a query (e.g. how many average items it would return)
                                maxComplexity: how much total field impact a query can have before it is rejected
                                NOTE: with fieldImpact at 2, values of maxComplexity less than 250 will prevent /ui from running
                            -->
                            <complexityConfiguration type="GraphQL.Validation.Complexity.ComplexityConfiguration, GraphQL">
                                <maxDepth>15</maxDepth>
                                <maxComplexity>2000</maxComplexity>
                                <fieldImpact>2</fieldImpact>
                            </complexityConfiguration>

                            <!--
                                CORS RESOLVER
                                CORS origins can be stored either in SSC configuration either in Item '/sitecore/system/Settings/Services/GraphQL/CORS origins'
                                For each cases uses appropiate resolver. So, it could be:
                                - Sitecore.Services.GraphQL.Hosting.Mvc.SscSecurity.CorsResolverFromConfig - it uses for OnPrem
                                - Sitecore.Services.GraphQL.Hosting.Mvc.SscSecurity.CorsResolverFromItem - it uses for SaaS
                            -->
                            <corsOriginsResolver type="Sitecore.Services.GraphQL.Hosting.Mvc.SscSecurity.CorsResolverFromConfig, Sitecore.Services.GraphQL.NetFxHost">
                                <param desc="sscSettings" type="Sitecore.Services.Core.Configuration.ConfigurationSettings, Sitecore.Services.Core" resolve="true"/>
                            </corsOriginsResolver>

                        </publicService>
                    </security>

                    <!--
                        PERFORMANCE
                        Options for tracing the performance of your GraphQL endpoints
                        
                        trackExecutionTimes: tracks the average execution time and worst execution time on the server. Results can be accessed on $endpointUrl/stats, but are not logged.
                        logQueries: the complete GraphQL request for each query executed is written to the Sitecore logs as INFO entries
                        logExecutionTimes: query execution times (in msec) are logged to the Sitecore logs in INFO entries for every query processed (does not include query text; use with logQueries)
                        logFullMetrics: extremely detailed information about the performance of every element in the query is written to the logs in INFO entries. Good for diagnosing slow queries, but very verbose.
                    -->
                    <performance>
                        <!-- Standard perf tracking just tracks execution times and logs nothing -->
                        <standard type="Sitecore.Services.GraphQL.Hosting.Performance.PerformanceTracker, Sitecore.Services.GraphQL" resolve="true">
                            <trackExecutionTimes>true</trackExecutionTimes>
                            <logExecutionTimes>false</logExecutionTimes>
                            <logQueries>false</logQueries>
                            <logFullMetrics>false</logFullMetrics>
                        </standard>
                        <!-- Diagnostic tracking writes execution times and queries to the logs, good for tracking a problematic API in production -->
                        <diagnostic type="Sitecore.Services.GraphQL.Hosting.Performance.PerformanceTracker, Sitecore.Services.GraphQL" resolve="true">
                            <trackExecutionTimes>true</trackExecutionTimes>
                            <logExecutionTimes>true</logExecutionTimes>
                            <logQueries>true</logQueries>
                            <logFullMetrics>false</logFullMetrics>
                        </diagnostic>
                        <!-- Maximum debug output, good for diagnosing slow queries in development -->
                        <debug type="Sitecore.Services.GraphQL.Hosting.Performance.PerformanceTracker, Sitecore.Services.GraphQL" resolve="true">
                            <trackExecutionTimes>true</trackExecutionTimes>
                            <logExecutionTimes>true</logExecutionTimes>
                            <logQueries>true</logQueries>
                            <logFullMetrics>true</logFullMetrics>
                        </debug>
                    </performance>
                </defaults>
            </GraphQL>
        </api>

        <pipelines>
            <initialize>
                <processor type="Sitecore.Services.GraphQL.Hosting.Mvc.Pipelines.Initialize.InitializeRoutes, Sitecore.Services.GraphQL.NetFxHost" 
                           resolve="true"
                           patch:before="processor[@type='Sitecore.Mvc.Pipelines.Loader.InitializeRoutes, Sitecore.Mvc']" />
            </initialize>
            <httpRequestBegin>
                <processor type="Sitecore.Services.GraphQL.Hosting.Mvc.Pipelines.HttpRequestBegin.SkipContextItemResolutionWhenGraphQLRequest, Sitecore.Services.GraphQL.NetFxHost" 
                           resolve="true"
                           patch:before="processor[contains(@type, 'ItemResolver')]"/>
            </httpRequestBegin>

            <startAnalytics>
                <processor
                    type="Sitecore.Services.GraphQL.Hosting.Mvc.Pipelines.StartAnalytics.DisableGraphQLRequestTracking, Sitecore.Services.GraphQL.NetFxHost"
                    resolve="true"
                    patch:after="processor[@type='Sitecore.Analytics.Pipelines.StartAnalytics.CheckPreconditions, Sitecore.Analytics']" />
            </startAnalytics>
        </pipelines>

        <services>
            <configurator type="Sitecore.Services.GraphQL.DependencyConfigurator, Sitecore.Services.GraphQL.NetFxHost" />
        </services>
    </sitecore>
</configuration>
